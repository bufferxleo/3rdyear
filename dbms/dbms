8


a
Primary keys:
Customer: Custid
HLoan: HLoanid
VLoan: VLoanid

Foreign keys:
HLoan: Custid (references Customer)
VLoan: Custid (references Customer)


Here is a simplified schema diagram:
   Customer (Custid, Custname, Age, phno)
      |
      v
   HLoan (HLoanid, Amount, Custid)
      |
      v
   VLoan (VLoanid, Amount, Custid)
---------------------------------------------------------------------------------------
b
CREATE TABLE Customer (
    Custid INT PRIMARY KEY,
    Custname VARCHAR(255),
    Age INT,
    phno VARCHAR(15)
);

CREATE TABLE HLoan (
    HLoanid INT PRIMARY KEY,
    Amount DECIMAL(10, 2),
    Custid INT,
    FOREIGN KEY (Custid) REFERENCES Customer(Custid)
);

CREATE TABLE VLoan (
    VLoanid INT PRIMARY KEY,
    Amount DECIMAL(10, 2),
    Custid INT,
    FOREIGN KEY (Custid) REFERENCES Customer(Custid)
);

-- Insert data into the Customer table
INSERT INTO Customer (Custid, Custname, Age, phno) VALUES
    (1, 'John Smith', 35, '123-456-7890'),
    (2, 'Alice Lane', 28, '987-654-3210'),
    (3, 'Bob Johnson', 45, '555-555-5555'),
    (4, 'Mary Davis', 32, '777-777-7777'),
    (5, 'David White', 40, '888-888-8888');

-- Insert data into the HLoan table
INSERT INTO HLoan (HLoanid, Amount, Custid) VALUES
    (101, 50000.00, 1),
    (102, 75000.00, 2),
    (103, 60000.00, 3),
    (104, 80000.00, 4),
    (105, 70000.00, 5);

-- Insert data into the VLoan table
INSERT INTO VLoan (VLoanid, Amount, Custid) VALUES
    (201, 30000.00, 1),
    (202, 40000.00, 2),
    (203, 35000.00, 3),
    (204, 45000.00, 4),
    (205, 32000.00, 5);
-------------------------------------------------------------------------------------
CREATE TABLE Customer (
    Custid INT PRIMARY KEY,
    Custname VARCHAR(255),
    Age INT,
    phno VARCHAR(15)
);

CREATE TABLE HLoan (
    HLoanid INT PRIMARY KEY,
    Amount DECIMAL(10, 2),
    Custid INT,
    FOREIGN KEY (Custid) REFERENCES Customer(Custid)
);

CREATE TABLE VLoan (
    VLoanid INT PRIMARY KEY,
    Amount DECIMAL(10, 2),
    Custid INT,
    FOREIGN KEY (Custid) REFERENCES Customer(Custid)
);

-- Insert data into the Customer table
INSERT INTO Customer (Custid, Custname, Age, phno) VALUES
    (1, 'John Smith', 35, '123-456-7890'),
    (2, 'Alice Lane', 28, '987-654-3210'),
    (3, 'Bob Johnson', 45, '555-555-5555'),
    (4, 'Mary Davis', 32, '777-777-7777'),
    (5, 'David White', 40, '888-888-8888');

-- Insert data into the HLoan table
INSERT INTO HLoan (HLoanid, Amount, Custid) VALUES
    (101, 50000.00, 1),
    (102, 75000.00, 2),
    (103, 60000.00, 3),
    (104, 80000.00, 4),
    (105, 70000.00, 5);

-- Insert data into the VLoan table
INSERT INTO VLoan (VLoanid, Amount, Custid) VALUES
    (201, 30000.00, 1),
    (202, 40000.00, 2),
    (203, 35000.00, 3),
    (204, 45000.00, 4),
    (205, 32000.00, 5);
-------------------------------------------------------------------------------------
c
SELECT Custid, COUNT(*) AS NumOfVLoans
FROM VLoan
WHERE Custid = 1
GROUP BY Custid;
-------------------------------------------------------------------------------------
d
SELECT Custid, SUM(Amount) AS TotalHLoanAmount
FROM HLoan
GROUP BY Custid;
-------------------------------------------------------------------------------------
f
CREATE VIEW CustomersWithBothLoans AS
SELECT C.Custid, C.Custname, C.Age, C.phno
FROM Customer C
WHERE C.Custid IN (
    SELECT DISTINCT H.Custid
    FROM HLoan H
    WHERE H.Custid IN (SELECT DISTINCT Custid FROM VLoan)
);

-- You can then query the view to retrieve the information.
SELECT * FROM CustomersWithBothLoans;
-------------------------------------------------------------------------------------
g
CREATE SEQUENCE Customer_Sequence
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO CYCLE;

-- To insert a new customer with an auto-incremented Custid:
INSERT INTO Customer (Custid, Custname, Age, phno)
VALUES (NEXTVAL('Customer_Sequence'), 'New Customer', 30, '999-999-9999');
-------------------------------------------------------------------------------------













10
10A



CREATE TABLE Dept (
    deptno INT PRIMARY KEY,
    dname VARCHAR(255),
    location VARCHAR(255)
);

CREATE TABLE Emp (
    eno INT PRIMARY KEY,
    ename VARCHAR(255),
    job VARCHAR(255),
    mgr INT,
    hiredate DATE,
    sal INT,
    comm INT,
    deptno INT,
    FOREIGN KEY (deptno) REFERENCES Dept(deptno)
);

-- Insert data into the Dept table
INSERT INTO Dept (deptno, dname, location) VALUES
    (10, 'Research', 'New York'),
    (20, 'Sales', 'Chicago'),
    (30, 'Marketing', 'Los Angeles'),
    (40, 'HR', 'Dallas');

-- Insert data into the Emp table
INSERT INTO Emp (eno, ename, job, mgr, hiredate, sal, comm, deptno) VALUES
    (1, 'John', 'Manager', NULL, '2023-01-15', 8000, NULL, 10),
    (2, 'Alice', 'Clerk', 1, '2023-02-20', 2500, NULL, 10),
    (3, 'Bob', 'Analyst', 1, '2023-03-12', 6000, 500, 20),
    (4, 'Carol', 'Salesman', 3, '2023-04-25', 4000, 300, 20),
    (5, 'David', 'Manager', NULL, '2023-05-03', 7500, NULL, 30),
    (6, 'Eve', 'Analyst', 5, '2023-06-10', 6000, 300, 30),
    (7, 'Frank', 'Clerk', 5, '2023-07-18', 2800, NULL, 30),
    (8, 'Grace', 'Clerk', 1, '2023-08-25', 2800, NULL, 10);

--------------------------------------------------------------------------------------

-- 1. Display all the employee names that start with 'B' and end with 'E'
SELECT ename
FROM Emp
WHERE ename LIKE 'B%E';
-------------------------------------------------------------------------------------
-- 2. Update the salary of all employees in the Research Department to 8000
UPDATE Emp
SET sal = 8000
WHERE deptno = 10;
-------------------------------------------------------------------------------------
-- 3. Display all employees who are working in CHICAGO
SELECT ename
FROM Emp
WHERE deptno IN (SELECT deptno FROM Dept WHERE location = 'CHICAGO');
-------------------------------------------------------------------------------------
-- 4. Display the employee name who is paid the highest salary
SELECT ename
FROM Emp
WHERE sal = (SELECT MAX(sal) FROM Emp);
-------------------------------------------------------------------------------------
-- 5. Display all the employees who are CLERKs and working in DALLAS
SELECT ename
FROM Emp
WHERE job = 'Clerk' AND deptno IN (SELECT deptno FROM Dept WHERE location = 'DALLAS');
-------------------------------------------------------------------------------------
-- 6. Display the annual salary of employees in descending order
SELECT ename, (sal * 12) AS annual_salary
FROM Emp
ORDER BY annual_salary DESC;
-------------------------------------------------------------------------------------
-- 7. Display the employee name whose salary is higher than the average salary of all employees
SELECT ename
FROM Emp
WHERE sal > (SELECT AVG(sal) FROM Emp);
-------------------------------------------------------------------------------------
-- 8. Delete all the employees who are located in NEW YORK
DELETE FROM Emp
WHERE deptno IN (SELECT deptno FROM Dept WHERE location = 'New York');
---------------------------------------------------------------------------------------
-- 9. Display the number of employees working in each department
SELECT dname, COUNT(*) AS num_employees
FROM Dept
LEFT JOIN Emp ON Dept.deptno = Emp.deptno
GROUP BY dname;
--------------------------------------------------------------------------------------


12a

12A


CREATE TABLE Member (
    MemberID INT PRIMARY KEY,
    MemberName VARCHAR(255),
    Mobile INT
);

CREATE TABLE DVD (
    DVDID INT PRIMARY KEY,
    Title VARCHAR(255),
    Category VARCHAR(255),
    Cost INT
);

CREATE TABLE DVDIssue (
    DVDID INT,
    MemberID INT,
    IssueDate DATE,
    FOREIGN KEY (DVDID) REFERENCES DVD(DVDID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- Insert data into the Member table
INSERT INTO Member (MemberID, MemberName, Mobile) VALUES
    (1, 'John Smith', 9876543210),
    (2, 'Alice Lane', 9871234567),
    (3, 'Bob Johnson', 9998887777),
    (4, 'Sara Smith', 9988776655);

-- Insert data into the DVD table
INSERT INTO DVD (DVDID, Title, Category, Cost) VALUES
    (101, 'Movie A', 'Action', 300),
    (102, 'Movie B', 'Love Story', 250),
    (103, 'Movie C', 'Action', 280),
    (104, 'Movie D', 'Horror', 220),
    (105, 'Movie E', 'Action', 270);

-- Insert data into the DVDIssue table
INSERT INTO DVDIssue (DVDID, MemberID, IssueDate) VALUES
    (101, 1, '2022-12-01'),
    (102, 2, '2022-11-15'),
    (103, 1, '2023-01-20'),
    (104, 3, '2023-02-05'),
    (105, 1, '2023-03-10');
---------------------------------------------------------------------------------------
-- 1. List the titles of Action movies
SELECT Title
FROM DVD
WHERE Category = 'Action';
---------------------------------------------------------------------------------------

-- 2. List the customer names who have been issued Love Story category DVDs
SELECT M.MemberName
FROM Member M
JOIN DVDIssue DI ON M.MemberID = DI.MemberID
JOIN DVD D ON DI.DVDID = D.DVDID
WHERE D.Category = 'Love Story';
---------------------------------------------------------------------------------------

-- 3. List all the titles with at least 6 characters and belong to the action category
SELECT Title
FROM DVD
WHERE Category = 'Action' AND LENGTH(Title) >= 6;
---------------------------------------------------------------------------------------

-- 4. List how many DVDs have been taken by each customer
SELECT M.MemberName, COUNT(DI.DVDID) AS NumDVDsTaken
FROM Member M
LEFT JOIN DVDIssue DI ON M.MemberID = DI.MemberID
GROUP BY M.MemberName;
---------------------------------------------------------------------------------------

-- 5. List all the titles whose cost is greater than 250
SELECT Title
FROM DVD
WHERE Cost > 250;
---------------------------------------------------------------------------------------

-- 6. List all the customers to whom a DVD was issued after January 2010
SELECT M.MemberName
FROM Member M
JOIN DVDIssue DI ON M.MemberID = DI.MemberID
WHERE DI.IssueDate > '2010-01-01';
---------------------------------------------------------------------------------------

-- 7. List the customers who have been issued Horror movies
SELECT M.MemberName
FROM Member M
JOIN DVDIssue DI ON M.MemberID = DI.MemberID
JOIN DVD D ON DI.DVDID = D.DVDID
WHERE D.Category = 'Horror';
---------------------------------------------------------------------------------------

-- 8. List all the customers who have been issued DVDs after December 2011
SELECT M.MemberName
FROM Member M
JOIN DVDIssue DI ON M.MemberID = DI.MemberID
WHERE DI.IssueDate > '2011-12-31';
---------------------------------------------------------------------------------------
